# -*- coding: utf-8 -*-
"""Gradio_ui.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PjIzP7vHT9IZXSnMwLT7ua8PQsOTq7yt
"""

!pip install -q transformers datasets accelerate peft bitsandbytes
!pip install -q pandas numpy matplotlib seaborn scikit-learn

from google.colab import drive
drive.mount('/content/drive')

import os
import torch
import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig
import warnings
warnings.filterwarnings('ignore')

# ==================== STEP 1: LOAD MODEL (Run this cell first) ====================
print("üîÑ Loading model...")

# Model configuration
MODEL_PATH = "/content/drive/MyDrive/stablelm_merged"  # Update this path
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Configure quantization for better GPU memory usage
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.bfloat16,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_use_double_quant=True,
)

model = AutoModelForCausalLM.from_pretrained(
    MODEL_PATH,
    quantization_config=bnb_config,
    device_map="auto",
    torch_dtype=torch.bfloat16,
    trust_remote_code=True
)

model.eval()
print("‚úÖ Model loaded successfully!")

def generate_discharge_report(gender, chief_complaint, major_procedure, history_present_illness,
                             past_medical_history, past_surgical_history, physical_examination):
    """Generate discharge report based on input fields"""

    # Construct the instruction prompt similar to your training data
    instruction = f"""Generate a structured medical discharge report based on the following patient data. Provide accurate discharge diagnosis, comprehensive discharge instructions, appropriate medications, and patient condition assessment.

Gender: {gender}

Chief Complaint: {chief_complaint}

Major Surgical or Invasive Procedure:
{major_procedure}

History of Present Illness: {history_present_illness}

Past Medical History: {past_medical_history}

Past Surgical History: {past_surgical_history}

Physical Examination: {physical_examination}"""

    # Format the prompt for the model
    prompt = f"""<|system|>
You are a highly skilled medical AI assistant specialized in generating comprehensive, accurate medical discharge reports.

<|user|>
{instruction}

<|assistant|>
"""

    try:
        # Tokenize
        inputs = tokenizer(
            prompt,
            return_tensors="pt",
            truncation=True,
            max_length=2048,
            padding=True
        ).to(device)

        # Generate
        with torch.no_grad():
            outputs = model.generate(
                **inputs,
                max_new_tokens=1024,
                temperature=0.7,
                top_p=0.9,
                top_k=50,
                repetition_penalty=1.1,
                do_sample=True,
                pad_token_id=tokenizer.pad_token_id,
                eos_token_id=tokenizer.eos_token_id,
                early_stopping=True,
                no_repeat_ngram_size=3,
            )

        # Decode and extract response
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        if "<|assistant|>" in response:
            response = response.split("<|assistant|>")[-1].strip()

        return response

    except Exception as e:
        return f"‚ùå Error generating report: {str(e)}"

# ==================== STEP 3: GRADIO UI ====================
def create_simple_ui():
    """Create simple form UI for medical report generation"""

    with gr.Blocks(title="Medical Discharge Report Generator", theme=gr.themes.Soft()) as demo:

        # Header
        gr.HTML("""
        <div style="text-align: center; background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                    padding: 20px; border-radius: 10px; margin-bottom: 20px;">
            <h1 style="color: white; margin: 0;">üè• Medical Discharge Report Generator</h1>
            <p style="color: white; margin: 10px 0 0 0;">Fill in patient information to generate discharge report</p>
        </div>
        """)

        # Input Form
        with gr.Group():
            gr.Markdown("## üìã Patient Information")

            with gr.Row():
                gender = gr.Dropdown(
                    choices=["M", "F"],
                    label="Gender",
                    value="F"
                )

            chief_complaint = gr.Textbox(
                label="Chief Complaint",
                placeholder="e.g., Cervical cancer",
                lines=2
            )

            major_procedure = gr.Textbox(
                label="Major Surgical or Invasive Procedure",
                placeholder="Describe the main procedure performed",
                lines=4
            )

            history_present_illness = gr.Textbox(
                label="History of Present Illness",
                placeholder="Detailed history of the current condition",
                lines=6
            )

            past_medical_history = gr.Textbox(
                label="Past Medical History",
                placeholder="Previous medical conditions and treatments",
                lines=4
            )

            past_surgical_history = gr.Textbox(
                label="Past Surgical History",
                placeholder="Previous surgical procedures",
                lines=3
            )

            physical_examination = gr.Textbox(
                label="Physical Examination",
                placeholder="Pre-operative and post-operative findings",
                lines=6
            )

        # Generate Button
        generate_btn = gr.Button("üè• Generate Discharge Report", variant="primary", size="lg")

        # Output
        with gr.Group():
            gr.Markdown("## üìÑ Generated Discharge Report")
            output_report = gr.Textbox(
                label="Discharge Report",
                lines=20,
                show_copy_button=True,
                interactive=False
            )

        # Sample Data Button
        def load_sample():
            return (
                "F",  # gender
                "Cervical cancer",  # chief_complaint
                "Robot-assisted radical parametrectomy, upper vaginectomy, bilateral salpingo-oophorectomy, bilateral complete pelvic lymphadenectomy, and cystoscopy",  # major_procedure
                "Ms. [REDACTED] is a [REDACTED] year old gravida 3 para 2 with a long history of dysfunctional uterine bleeding. In [REDACTED] she underwent a total laparoscopic hysterectomy and cystoscopy for her dysfunctional uterine bleeding. Pathology from the surgery demonstrated grade 1 invasive adenocarcinoma of the cervix measuring 2cm in greatest dimension with a depth of invasion of 8mm. Given her diagnosis of Stage 1B1 adenocarcinoma of the cervix, grade 1 Ms. [REDACTED] was advised to undergo staging surgery (radical parametrectomy, lymph node dissection).",  # history_present_illness
                "Ob- Gyn History: G3P2: spontaneous vaginal delivery x 2, full term, no complications. TAB x 1. Past Medical History: Stage IB-1 adenocarcinoma of the cervix. Seizures, last one [REDACTED] years ago, off Keppra x [REDACTED] year. Interstitial cystitis/bladder pain syndrome s/p cysto/hydrodistention by urology [REDACTED], no treatment recently. Lumbar spondylosis. Degenerative disc disease",  # past_medical_history
                "Total laparoscopic hysterectomy and cystoscopy. Laparoscopic appendectomy. Laparoscopic [REDACTED] fundoplication. Hysteroscopic polypectomy, Dilatation & Curettage. Cystoscopy with hydrodistention. Dilatation and evacuation x 1",  # past_surgical_history
                "Pre-Operative Physical Exam: General: No acute distress. Chest: regular rate and rhythm. Pulmonary: Clear to auscultation bilaterally. Abdomen: Soft, non tender, non distended, + bowel sounds. No rebound/guarding. well healed laparoscopic incision scars. Post-Operative Physical Exam: Vital signs stable. General: No acute distress. Chest: regular rate and rhythm. Pulmonary: Clear to auscultation bilaterally. Abdomen: Soft, appropriate tenderness to palpation, non distended, + bowel sounds. No rebound/guarding. Trochar incisions clean/dry/intact. Extremities: non tender, non edematous"  # physical_examination
            )

        sample_btn = gr.Button("üìù Load Sample Data", variant="secondary")

        # Event handlers
        generate_btn.click(
            generate_discharge_report,
            inputs=[gender, chief_complaint, major_procedure, history_present_illness,
                   past_medical_history, past_surgical_history, physical_examination],
            outputs=output_report
        )

        sample_btn.click(
            load_sample,
            outputs=[gender, chief_complaint, major_procedure, history_present_illness,
                    past_medical_history, past_surgical_history, physical_examination]
        )

        gr.Markdown("""
        ### üìã Instructions
        1. Fill in the patient information in the form above
        2. Click "Generate Discharge Report" to create the report
        3. Use "Load Sample Data" to test with example data
        """)

    return demo

# ==================== STEP 4: LAUNCH UI ====================
if __name__ == "__main__":
    print("üöÄ Starting UI...")
    demo = create_simple_ui()
    demo.launch(share=True, debug=True)